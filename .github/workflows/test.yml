name: Test

on:
  pull_request:
    branches: ['preview', 'main']
  push:
    branches: ['preview', 'main']

jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      PUBLIC_AMPLITUDE_API_KEY: ${{ secrets.PUBLIC_AMPLITUDE_API_KEY }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      PEPPER: ${{ secrets.PEPPER }}
    steps:
      - uses: actions/checkout@v3
      - uses: planetscale/setup-pscale-action@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install
      
      - name: Delete Existing Dev DB Branches
        run: pnpm pscale:branch:delete-all-dev
      
      - name: Create Dev DB Branch
        run: pnpm pscale:branch:create
  unit-tests:
    needs: prepare
    runs-on: ubuntu-latest
    env:
      PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      PUBLIC_AMPLITUDE_API_KEY: ${{ secrets.PUBLIC_AMPLITUDE_API_KEY }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      PEPPER: ${{ secrets.PEPPER }}
    steps:
      - uses: actions/checkout@v3
      - uses: planetscale/setup-pscale-action@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build
        run: pnpm build
      
      - name: Generate New Credentials
        run: pnpm pscale:cred:create "unit-tests-${{ github.run_number }}"

      - name: Run unit tests
        run: pnpm test:unit

  e2e-tests:
    needs: prepare
    runs-on: ubuntu-latest
    env:
      PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      PUBLIC_AMPLITUDE_API_KEY: ${{ secrets.PUBLIC_AMPLITUDE_API_KEY }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      PEPPER: ${{ secrets.PEPPER }}
    steps:
      - uses: actions/checkout@v3
      - uses: planetscale/setup-pscale-action@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(pnpm list @playwright/test | grep @playwright/test | awk '{print $2}')" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: npx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: pnpm exec playwright install msedge # Can't be cached
      
      - name: Generate New Credentials
        run: pnpm pscale:cred:create "e2e-tests-${{ github.run_number }}"

      - name: Run end-to-end tests
        run: pnpm test

  cleanup:
    needs: [unit-tests, e2e-tests]
    if: always()
    runs-on: ubuntu-latest
    env:
      PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
      PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: planetscale/setup-pscale-action@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Delete Credentials
        run: pnpm pscale:cred:delete-all

      - name: Delete Dev DB Branch
        run: pnpm pscale:branch:delete
