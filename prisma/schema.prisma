generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch"]
}

generator kyselyServerSide {
  provider            = "prisma-kysely"
  camelCase           = true
  output              = "../src/lib/models/types"
  fileName            = "database.types.ts"
  decimalTypeOverride = "number"
  bigIntTypeOverride  = "number"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RecordType {
  PRODUCTION_RECORD
  SEED_RECORD
  TEST_RECORD
}

model Category {
  categoryId String @id @default(cuid()) @db.VarChar(30)

  courses Course[]

  categoryImgHref    String     @db.Text
  categoryTitle      String     @unique
  categoryRecordType RecordType @default(PRODUCTION_RECORD)
}

model Course {
  courseId String @id @default(cuid()) @db.VarChar(30)

  category           Category             @relation(fields: [courseCategoryId], references: [categoryId], onUpdate: Cascade, onDelete: Restrict)
  courseProgressions CourseProgress[]
  instructor         User                 @relation(fields: [courseInstructorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  lessons            Lesson[]
  organization       Organization?        @relation(fields: [courseOrganizationId], references: [organizationId], onUpdate: Cascade, onDelete: SetNull)
  UserCourseFavorite UserCourseFavorite[]

  courseCategoryId           String
  courseCurrentPrice         Decimal
  courseDescription          String     @db.Text
  courseDifficulty           String
  courseEstimatedTimeHours   Int
  courseEstimatedTimeMinutes Int
  courseImgHref              String
  courseInstructorId         String
  courseLessonCount          Int
  courseOrganizationId       String?
  courseOriginalPrice        Decimal
  courseRatingAverage        Float
  courseRatingCount          Int
  courseTitle                String     @db.Text
  courseRecordType           RecordType @default(PRODUCTION_RECORD)

  @@index([courseCategoryId])
  @@index([courseInstructorId])
  @@index([courseOrganizationId])
  @@fulltext([courseTitle])
  @@fulltext([courseTitle, courseDescription])
}

model UserCourseFavorite {
  userCourseFavoriteUserId   String
  userCourseFavoriteCourseId String

  course Course @relation(fields: [userCourseFavoriteCourseId], references: [courseId], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userCourseFavoriteUserId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  userCourseFavoriteRecordType RecordType @default(PRODUCTION_RECORD)

  @@id([userCourseFavoriteUserId, userCourseFavoriteCourseId])
  @@index([userCourseFavoriteCourseId])
  @@index([userCourseFavoriteUserId])
}

enum ContentType {
  VIDEO
  TEXT
  QUIZ
}

model CourseContent {
  courseContentId String @id @default(cuid()) @db.VarChar(30)

  Lesson Lesson? @relation(fields: [courseContentLessonId], references: [lessonId])

  courseContentAuthorId   String
  courseContentJson       Json
  courseContentLessonId   String?
  courseContentRecordType RecordType  @default(PRODUCTION_RECORD)
  courseContentType       ContentType

  @@index([courseContentAuthorId])
  @@index([courseContentLessonId])
}

model CourseProgress {
  courseProgressUserId   String
  courseProgressCourseId String

  course Course @relation(fields: [courseProgressCourseId], references: [courseId], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [courseProgressUserId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  courseProgressLessonsCompleted Int
  courseProgressRecordType       RecordType @default(PRODUCTION_RECORD)

  @@id([courseProgressUserId, courseProgressCourseId])
  @@unique([courseProgressUserId, courseProgressCourseId])
  @@index([courseProgressCourseId])
  @@index([courseProgressUserId])
}

model Lesson {
  lessonId String @id @default(cuid()) @db.VarChar(30)

  course         Course?         @relation(fields: [lessonCourseId], references: [courseId], onUpdate: Cascade, onDelete: Cascade)
  courseContents CourseContent[]

  lessonCourseId   String?
  lessonTitle      String
  lessonRecordType RecordType @default(PRODUCTION_RECORD)

  @@index([lessonCourseId])
}

model Organization {
  organizationId String @id @default(cuid()) @db.VarChar(30)

  courses Course[]
  User    User[]

  organizationDescription String?    @db.Text
  organizationName        String     @db.Text
  organizationRecordType  RecordType @default(PRODUCTION_RECORD)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  userId String @id @default(cuid()) @db.VarChar(30)

  AuthUser           AuthUser?        @relation(fields: [userAuthUserId], references: [authUserId], onUpdate: Cascade, onDelete: Cascade)
  courses            Course[]
  courseProgressions CourseProgress[]
  organization       Organization?    @relation(fields: [userOrganizationId], references: [organizationId], onUpdate: Cascade, onDelete: SetNull)
  permissions        Permission[]

  userAreaCode       String?              @db.VarChar(5)
  userAuthUserId     String?              @unique @db.VarChar(30)
  userBio            String?              @db.Text
  userCity           String?              @db.Text
  userCountryCode    String?              @db.VarChar(5)
  userEmail          String               @unique
  userName           String               @db.Text
  userOrganizationId String?
  userPhoneNumber    String?              @db.VarChar(15)
  userPhotoUrl       String?              @db.Text
  userPhotoImageId   String?              @db.VarChar(36)
  userRole           UserRole             @default(USER)
  userState          String?
  UserCourseFavorite UserCourseFavorite[]
  userRecordType     RecordType           @default(PRODUCTION_RECORD)

  @@index([userAuthUserId])
  @@index([userOrganizationId])
}

enum KeyType {
  CREDENTIAL_HASH
  OAUTH_TOKEN
}

model AuthKey {
  authKeyId String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authKeyAuthUserId], references: [authUserId], onUpdate: Cascade, onDelete: Cascade)

  authKeyAuthUserId String     @db.VarChar(30)
  authKeyValue      String
  authKeyType       KeyType
  authKeyRecordType RecordType @default(PRODUCTION_RECORD)

  @@index([authKeyAuthUserId])
}

model AuthSession {
  authSessionId String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authSessionAuthUserId], references: [authUserId], onUpdate: Cascade, onDelete: Cascade)

  authSessionAuthUserId     String     @db.VarChar(30)
  authSessionExpirationDate DateTime
  authSessionRecordType     RecordType @default(PRODUCTION_RECORD)

  @@index([authSessionAuthUserId])
}

model AuthUser {
  authUserId String @id @default(cuid()) @db.VarChar(30)

  authKeys     AuthKey[]
  authSessions AuthSession[]
  user         User?

  authUserEmail      String     @unique
  authUserRecordType RecordType @default(PRODUCTION_RECORD)
}

enum PermissionType {
  READ
  WRITE
  DELETE
}

enum ResourceType {
  COURSE
  LESSON
  USER
}

model Permission {
  permissionId String @id @default(cuid()) @db.VarChar(30)

  user User @relation(fields: [permissionUserId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  permissionType         PermissionType
  permissionResourceId   String // Eventually shift this to another table
  permissionResourceType ResourceType
  permissionUserId       String
  permissionRecordType   RecordType     @default(PRODUCTION_RECORD)

  @@index([permissionUserId])
}

model SiteSetting {
  siteSettingKey        String     @id
  siteSettingValue      String
  siteSettingRecordType RecordType @default(PRODUCTION_RECORD)
}
