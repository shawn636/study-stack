generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch"]
}

generator kyselyServerSide {
  provider            = "prisma-kysely"
  camelCase           = true
  output              = "../src/lib/models/types"
  fileName            = "database.types.ts"
  decimalTypeOverride = "number"
  bigIntTypeOverride  = "number"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RecordType {
  PRODUCTION_RECORD
  SEED_RECORD
  TEST_RECORD
}

model Category {
  id String @id @default(cuid()) @db.VarChar(30)

  courses Course[]

  imgHref    String     @db.Text
  title      String     @unique
  recordType RecordType @default(PRODUCTION_RECORD)
}

model Course {
  id String @id @default(cuid()) @db.VarChar(30)

  category           Category         @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  courseProgressions CourseProgress[]
  instructor         User             @relation(fields: [instructorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lessons            Lesson[]
  organization       Organization?    @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  courseFavorites    CourseFavorite[]

  categoryId           String
  currentPrice         Decimal
  description          String     @db.Text
  difficulty           String
  estimatedTimeHours   Int
  estimatedTimeMinutes Int
  imgHref              String
  instructorId         String
  lessonCount          Int
  organizationId       String?
  originalPrice        Decimal
  ratingAverage        Float
  ratingCount          Int
  title                String     @db.Text
  recordType           RecordType @default(PRODUCTION_RECORD)

  @@index([categoryId])
  @@index([instructorId])
  @@index([organizationId])
  @@fulltext([title])
  @@fulltext([title, description])
}

model CourseFavorite {
  userId   String
  courseId String

  course Course @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  recordType RecordType @default(PRODUCTION_RECORD)

  @@id([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

enum ContentType {
  VIDEO
  TEXT
  QUIZ
}

model CourseContent {
  id String @id @default(cuid()) @db.VarChar(30)

  Lesson Lesson? @relation(fields: [lessonId], references: [id])

  authorId    String
  json        Json
  lessonId    String?
  recordType  RecordType  @default(PRODUCTION_RECORD)
  contentType ContentType

  @@index([authorId])
  @@index([lessonId])
}

model CourseProgress {
  userId   String
  courseId String

  course Course @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  lessonsCompleted Int
  recordType       RecordType @default(PRODUCTION_RECORD)

  @@id([userId, courseId])
  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model Lesson {
  id String @id @default(cuid()) @db.VarChar(30)

  course         Course?         @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  courseContents CourseContent[]

  courseId   String?
  title      String
  recordType RecordType @default(PRODUCTION_RECORD)

  @@index([courseId])
}

model Organization {
  id String @id @default(cuid()) @db.VarChar(30)

  courses Course[]
  User    User[]

  description String?    @db.Text
  name        String     @db.Text
  recordType  RecordType @default(PRODUCTION_RECORD)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id String @id @default(cuid()) @db.VarChar(30)

  AuthUser           AuthUser?        @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  courses            Course[]
  courseProgressions CourseProgress[]
  organization       Organization?    @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  permissions        Permission[]

  areaCode        String?          @db.VarChar(5)
  authUserId      String?          @unique @db.VarChar(30)
  bio             String?          @db.Text
  city            String?          @db.Text
  countryCode     String?          @db.VarChar(5)
  email           String           @unique
  name            String           @db.Text
  organizationId  String?
  phoneNumber     String?          @db.VarChar(15)
  photoUrl        String?          @db.Text
  photoImageId    String?          @db.VarChar(36)
  role            UserRole         @default(USER)
  state           String?
  courseFavorites CourseFavorite[]
  recordType      RecordType       @default(PRODUCTION_RECORD)

  @@index([id])
  @@index([organizationId])
}

enum KeyType {
  CREDENTIAL_HASH
  OAUTH_TOKEN
}

model AuthKey {
  id String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  authUserId String     @db.VarChar(30)
  value      String
  type       KeyType
  recordType RecordType @default(PRODUCTION_RECORD)

  @@index([authUserId])
}

model AuthSession {
  id String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  authUserId     String     @db.VarChar(30)
  expirationDate DateTime
  recordType     RecordType @default(PRODUCTION_RECORD)

  @@index([authUserId])
}

model AuthUser {
  id String @id @default(cuid()) @db.VarChar(30)

  authKeys     AuthKey[]
  authSessions AuthSession[]
  user         User?

  email      String     @unique
  recordType RecordType @default(PRODUCTION_RECORD)
}

enum PermissionType {
  READ
  WRITE
  DELETE
}

enum ResourceType {
  COURSE
  LESSON
  USER
}

model Permission {
  id String @id @default(cuid()) @db.VarChar(30)

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  type         PermissionType
  resourceId   String // Eventually shift this to another table
  resourceType ResourceType
  userId       String
  recordType   RecordType     @default(PRODUCTION_RECORD)

  @@index([userId])
}

model SiteSetting {
  key        String     @id
  value      String
  recordType RecordType @default(PRODUCTION_RECORD)
}

model Sandbox {
  id      Int    @id @default(autoincrement())
  name    String
  funFact String //new field to add later
}
