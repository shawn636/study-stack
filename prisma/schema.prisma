// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// COURSE RELATED MODELS

model Course {
  id              Int      @id @default(autoincrement())
  title           String   @db.MediumText
  description     String   @db.LongText
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      Int
  price           Decimal
  discountedPrice Decimal?
  lessons         Lesson[]
  instructor      User     @relation(fields: [instructorId], references: [id])
  instructorId    Int

  @@index([categoryId])
  @@index([instructorId])
}

model Category {
  id       Int      @id @default(autoincrement())
  title    String   @unique
  img_href String
  courses  Course[]
}

model Lesson {
  id       Int             @id @default(autoincrement())
  title    String
  content  CourseContent[]
  Course   Course?         @relation(fields: [courseId], references: [id])
  courseId Int?

  @@index([courseId])
}

model CourseContent {
  id            Int         @id @default(autoincrement())
  type          ContentType @relation(fields: [contentTypeId], references: [id])
  contentTypeId Int
  Lesson        Lesson?     @relation(fields: [lessonId], references: [id])
  lessonId      Int?
  content       Json
  author        User        @relation(fields: [authorId], references: [id])
  authorId      Int

  @@index([contentTypeId])
  @@index([lessonId])
  @@index([authorId])
}

model ContentType {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  CourseContent CourseContent[]
}

// USER RELATED MODELS

model Organization {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  users       User[]
}

model User {
  id             Int             @id @default(autoincrement())
  auth_user_id   String          @unique
  name           String
  email          String          @unique
  Organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId Int?
  courseContent  CourseContent[]
  courses        Course[]
  AuthUser       AuthUser?

  @@index([organizationId])
  @@index([auth_user_id])
}

model AuthUser {
  id          String        @id @unique
  user_id     Int?          @unique
  User        User?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  email       String        @unique
  AuthSession AuthSession[]
  AuthKey     AuthKey[]

  @@index([user_id])
  @@map("auth_user")
}

model AuthSession {
  id           String   @id @unique
  auth_user_id String
  expires      DateTime
  auth_user    AuthUser @relation(fields: [auth_user_id], references: [id], onDelete: Cascade)

  @@index([auth_user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  auth_user_id    String
  auth_user       AuthUser @relation(references: [id], fields: [auth_user_id], onDelete: Cascade)

  @@index([auth_user_id])
  @@map("auth_key")
}

model CSRFToken {
  token   String @id @unique
  expires BigInt

  @@map("csrf_token")
}
