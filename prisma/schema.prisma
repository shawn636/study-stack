generator client {
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch"]
  provider        = "prisma-client-js"
}

generator kyselyServerSide {
  camelCase           = true
  bigIntTypeOverride  = "number"
  decimalTypeOverride = "number"
  fileName            = "database.types.ts"
  output              = "../src/lib/models/types"
  provider            = "prisma-kysely"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

enum KeyType {
  CREDENTIAL_HASH
  OAUTH_TOKEN
}

enum PlatformRole {
  ADMIN
  USER
}

enum RecordType {
  PRODUCTION_RECORD
  SEED_RECORD
  TEST_RECORD
}

enum RoleType {
  ADMIN
  EDITOR
  PUBLISHER
  VIEWER
}

model AuthKey {
  id String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  authUserId String     @db.VarChar(30)
  createdAt  DateTime   @default(now())
  recordType RecordType @default(PRODUCTION_RECORD)
  type       KeyType
  updatedAt  DateTime   @default(now()) @updatedAt
  value      String

  @@index([authUserId])
}

model AuthSession {
  id String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  authUserId     String     @db.VarChar(30)
  createdAt      DateTime   @default(now())
  expirationDate DateTime
  recordType     RecordType @default(PRODUCTION_RECORD)
  updatedAt      DateTime   @default(now()) @updatedAt

  @@index([authUserId])
}

model AuthUser {
  id String @id @default(cuid()) @db.VarChar(30)

  authKeys     AuthKey[]
  authSessions AuthSession[]
  user         User?

  createdAt  DateTime   @default(now())
  email      String     @unique
  recordType RecordType @default(PRODUCTION_RECORD)
  updatedAt  DateTime   @default(now()) @updatedAt
}

model Category {
  id String @id @default(cuid()) @db.VarChar(30)

  courses Course[]

  createdAt  DateTime   @default(now())
  imgHref    String     @db.Text
  recordType RecordType @default(PRODUCTION_RECORD)
  title      String     @unique
  updatedAt  DateTime   @default(now()) @updatedAt
}

model Course {
  id String @id @default(cuid()) @db.VarChar(30)

  category           Category         @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  courseFavorites    CourseFavorite[]
  courseProgressions CourseProgress[]
  instructor         User             @relation(fields: [instructorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  organization       Organization?    @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  categoryId           String
  createdAt            DateTime            @default(now())
  currentPrice         Decimal
  description          String              @db.Text
  difficulty           String
  estimatedTimeHours   Int
  estimatedTimeMinutes Int
  imgHref              String
  instructorId         String
  lessonCount          Int
  organizationId       String?
  originalPrice        Decimal
  ratingAverage        Float
  ratingCount          Int
  recordType           RecordType          @default(PRODUCTION_RECORD)
  title                String              @db.Text
  updatedAt            DateTime            @default(now()) @updatedAt
  CourseDetailsPage    CourseDetailsPage[]

  @@index([categoryId])
  @@index([instructorId])
  @@index([organizationId])
  @@fulltext([title])
  @@fulltext([title, description])
}

model CourseDetailsPage {
  courseId String @id @db.VarChar(30)

  course Course @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt  DateTime   @default(now())
  recordType RecordType @default(PRODUCTION_RECORD)
  updatedAt  DateTime   @default(now()) @updatedAt
}

model CourseFavorite {
  courseId String
  userId   String

  course Course @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt  DateTime   @default(now())
  recordType RecordType @default(PRODUCTION_RECORD)
  updatedAt  DateTime   @default(now()) @updatedAt

  @@id([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model CourseProgress {
  courseId String
  userId   String

  course Course @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt        DateTime   @default(now())
  lessonsCompleted Int
  recordType       RecordType @default(PRODUCTION_RECORD)
  updatedAt        DateTime   @default(now()) @updatedAt

  @@id([userId, courseId])
  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model Organization {
  id String @id @default(cuid()) @db.VarChar(30)

  courses          Course[]
  OrganizationRole OrganizationRole[]
  User             User[]

  createdAt   DateTime   @default(now())
  description String?    @db.Text
  name        String     @db.Text
  recordType  RecordType @default(PRODUCTION_RECORD)
  updatedAt   DateTime   @default(now()) @updatedAt
}

model OrganizationRole {
  organizationId String @db.VarChar(30)
  userId         String @db.VarChar(30)

  organization Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model SiteSetting {
  key String @id

  createdAt  DateTime   @default(now())
  recordType RecordType @default(PRODUCTION_RECORD)
  updatedAt  DateTime   @default(now()) @updatedAt
  value      String
}

model User {
  id String @id @default(cuid()) @db.VarChar(30)

  AuthUser           AuthUser?          @relation(fields: [authUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  courses            Course[]
  courseFavorites    CourseFavorite[]
  courseProgressions CourseProgress[]
  organization       Organization?      @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  OrganizationRole   OrganizationRole[]

  areaCode       String?      @db.VarChar(5)
  authUserId     String?      @unique @db.VarChar(30)
  bio            String?      @db.Text
  city           String?      @db.Text
  createdAt      DateTime     @default(now())
  countryCode    String?      @db.VarChar(5)
  email          String       @unique
  name           String       @db.Text
  organizationId String?
  phoneNumber    String?      @db.VarChar(15)
  photoUrl       String?      @db.Text
  photoImageId   String?      @db.VarChar(36)
  platformRole   PlatformRole @default(USER)
  state          String?
  recordType     RecordType   @default(PRODUCTION_RECORD)
  updatedAt      DateTime     @default(now()) @updatedAt

  @@index([id])
  @@index([organizationId])
}
