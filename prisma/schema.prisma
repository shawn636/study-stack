generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch"]
}

generator kyselyServerSide {
  provider            = "prisma-kysely"
  camelCase           = true
  output              = "../src/lib/models/types"
  fileName            = "database.types.ts"
  decimalTypeOverride = "number"
  bigIntTypeOverride  = "number"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  categoryId String @id @default(cuid()) @db.VarChar(30)

  courses Course[]

  categoryImgHref String @db.Text
  categoryTitle   String @unique
}

model Course {
  courseId String @id @default(cuid()) @db.VarChar(30)

  category           Category         @relation(fields: [categoryId], references: [categoryId], onUpdate: Cascade, onDelete: Restrict)
  courseProgressions CourseProgress[]
  instructor         User             @relation(fields: [instructorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  lessons            Lesson[]
  organization       Organization?    @relation(fields: [organizationId], references: [organizationId], onUpdate: Cascade, onDelete: SetNull)

  categoryId           String
  courseCurrentPrice   Decimal
  courseDescription    String               @db.Text
  courseDifficulty     String
  estimatedTimeHours   Int
  estimatedTimeMinutes Int
  courseImgHref        String
  instructorId         String
  lessonCount          Int
  organizationId       String?
  courseOriginalPrice  Decimal
  courseRatingAverage  Float
  courseRatingCount    Int
  courseTitle          String               @db.Text
  UserCourseFavorite   UserCourseFavorite[]

  @@index([categoryId])
  @@index([instructorId])
  @@index([organizationId])
  @@fulltext([courseTitle])
  @@fulltext([courseTitle, courseDescription])
}

model UserCourseFavorite {
  course   Course @relation(fields: [courseId], references: [courseId], onUpdate: Cascade, onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  courseId String
  userId   String

  @@id([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

enum ContentType {
  VIDEO
  TEXT
  QUIZ
}

model CourseContent {
  courseContentId String @id @default(cuid()) @db.VarChar(30)

  contentType ContentType

  authorId String
  content  Json
  lessonId String?
  Lesson   Lesson? @relation(fields: [lessonId], references: [lessonId])

  @@index([authorId])
  @@index([lessonId])
}

model CourseProgress {
  course Course @relation(fields: [courseId], references: [courseId], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  courseId         String
  lessonsCompleted Int
  userId           String

  @@id([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model Lesson {
  lessonId String @id @default(cuid()) @db.VarChar(30)

  course         Course?         @relation(fields: [courseId], references: [courseId], onUpdate: Cascade, onDelete: Cascade)
  courseContents CourseContent[]

  courseId    String?
  lessonTitle String

  @@index([courseId])
}

model Organization {
  organizationId String @id @default(cuid()) @db.VarChar(30)

  courses Course[]

  organizationDescription String? @db.Text
  organizationName        String  @db.Text
  User                    User[]
}

model User {
  userId String @id @default(cuid()) @db.VarChar(30)

  AuthUser           AuthUser?        @relation(fields: [authUserId], references: [authUserId], onUpdate: Cascade, onDelete: Cascade)
  courses            Course[]
  courseProgressions CourseProgress[]
  organization       Organization?    @relation(fields: [organizationId], references: [organizationId], onUpdate: Cascade, onDelete: SetNull)
  permissions        Permission[]

  userAreaCode       String?              @db.VarChar(5)
  authUserId         String?              @unique @db.VarChar(30)
  userBio            String?              @db.Text
  userCity           String?              @db.Text
  userCountryCode    String?              @db.VarChar(5)
  userEmail          String               @unique
  userName           String               @db.Text
  organizationId     String?
  userPhoneNumber    String?              @db.VarChar(15)
  userPhotoUrl       String?              @db.Text
  userRole           String
  userState          String?
  UserCourseFavorite UserCourseFavorite[]

  @@index([authUserId])
  @@index([organizationId])
}

enum KeyType {
  CREDENTIAL_HASH
  OAUTH_TOKEN
}

model AuthKey {
  authKeyId String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [authUserId], onUpdate: Cascade, onDelete: Cascade)

  authUserId   String  @db.VarChar(30)
  authKeyValue String
  authKeyType  KeyType

  @@index([authUserId])
}

model AuthSession {
  authSessionId String @id @default(cuid()) @db.VarChar(30)

  authUser AuthUser @relation(fields: [authUserId], references: [authUserId], onUpdate: Cascade, onDelete: Cascade)

  authUserId                String   @db.VarChar(30)
  authSessionExpirationDate DateTime

  @@index([authUserId])
}

model AuthUser {
  authUserId String @id @default(cuid()) @db.VarChar(30)

  authKeys     AuthKey[]
  authSessions AuthSession[]
  user         User?

  authUserEmail String @unique
}

model CsrfToken {
  csrfToken String @id @default(cuid()) @db.VarChar(30)

  csrfTokenExpirationDate DateTime
}

enum PermissionType {
  READ
  WRITE
  DELETE
}

enum ResourceType {
  COURSE
  LESSON
  USER
}

model Permission {
  permissionId String @id @default(cuid()) @db.VarChar(30)

  user User @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  permissionType PermissionType
  resourceId     String // Eventually shift this to another table
  resourceType   ResourceType
  userId         String

  @@index([userId])
}
